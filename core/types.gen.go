// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package core

import (
	"time"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ContentEncoding.
const (
	ContentEncodingGzip     ContentEncoding = "gzip"
	ContentEncodingIdentity ContentEncoding = "identity"
)

// Defines values for CreateTableRequestFieldsType.
const (
	Bool    CreateTableRequestFieldsType = "bool"
	Float64 CreateTableRequestFieldsType = "float64"
	Int64   CreateTableRequestFieldsType = "int64"
	Uint64  CreateTableRequestFieldsType = "uint64"
	Utf8    CreateTableRequestFieldsType = "utf8"
)

// Defines values for EpochCompatibility.
const (
	EpochCompatibilityH  EpochCompatibility = "h"
	EpochCompatibilityM  EpochCompatibility = "m"
	EpochCompatibilityMs EpochCompatibility = "ms"
	EpochCompatibilityNs EpochCompatibility = "ns"
	EpochCompatibilityS  EpochCompatibility = "s"
	EpochCompatibilityU  EpochCompatibility = "u"
	EpochCompatibilityΜ  EpochCompatibility = "µ"
)

// Defines values for Format.
const (
	FormatCsv     Format = "csv"
	FormatJson    Format = "json"
	FormatJsonl   Format = "jsonl"
	FormatParquet Format = "parquet"
)

// Defines values for LineProtocol.
const (
	Textplain            LineProtocol = "text/plain"
	TextplainCharsetUtf8 LineProtocol = "text/plain; charset=utf-8"
)

// Defines values for PrecisionWrite.
const (
	Auto        PrecisionWrite = "auto"
	Microsecond PrecisionWrite = "microsecond"
	Millisecond PrecisionWrite = "millisecond"
	Nanosecond  PrecisionWrite = "nanosecond"
	Second      PrecisionWrite = "second"
)

// Defines values for PrecisionWriteCompatibility.
const (
	PrecisionWriteCompatibilityMs PrecisionWriteCompatibility = "ms"
	PrecisionWriteCompatibilityNs PrecisionWriteCompatibility = "ns"
	PrecisionWriteCompatibilityS  PrecisionWriteCompatibility = "s"
	PrecisionWriteCompatibilityUs PrecisionWriteCompatibility = "us"
)

// Defines values for QueryRequestObjectFormat.
const (
	QueryRequestObjectFormatCsv     QueryRequestObjectFormat = "csv"
	QueryRequestObjectFormatJson    QueryRequestObjectFormat = "json"
	QueryRequestObjectFormatJsonl   QueryRequestObjectFormat = "jsonl"
	QueryRequestObjectFormatParquet QueryRequestObjectFormat = "parquet"
	QueryRequestObjectFormatPretty  QueryRequestObjectFormat = "pretty"
)

// Defines values for AcceptQueryHeader.
const (
	AcceptQueryHeaderApplicationjson             AcceptQueryHeader = "application/json"
	AcceptQueryHeaderApplicationjsonl            AcceptQueryHeader = "application/jsonl"
	AcceptQueryHeaderApplicationvndApacheParquet AcceptQueryHeader = "application/vnd.apache.parquet"
	AcceptQueryHeaderTextcsv                     AcceptQueryHeader = "text/csv"
)

// Defines values for ContentType.
const (
	ContentTypeApplicationjson ContentType = "application/json"
)

// Defines values for PostV2WriteParamsContentEncoding.
const (
	PostV2WriteParamsContentEncodingGzip     PostV2WriteParamsContentEncoding = "gzip"
	PostV2WriteParamsContentEncodingIdentity PostV2WriteParamsContentEncoding = "identity"
)

// Defines values for PostV2WriteParamsAccept.
const (
	PostV2WriteParamsAcceptApplicationjson PostV2WriteParamsAccept = "application/json"
)

// Defines values for PostInstallPluginPackagesParamsContentType.
const (
	PostInstallPluginPackagesParamsContentTypeApplicationjson PostInstallPluginPackagesParamsContentType = "application/json"
)

// Defines values for PostInstallPluginRequirementsParamsContentType.
const (
	PostInstallPluginRequirementsParamsContentTypeApplicationjson PostInstallPluginRequirementsParamsContentType = "application/json"
)

// Defines values for PostDisableProcessingEngineTriggerParamsContentType.
const (
	PostDisableProcessingEngineTriggerParamsContentTypeApplicationjson PostDisableProcessingEngineTriggerParamsContentType = "application/json"
)

// Defines values for PostEnableProcessingEngineTriggerParamsContentType.
const (
	PostEnableProcessingEngineTriggerParamsContentTypeApplicationjson PostEnableProcessingEngineTriggerParamsContentType = "application/json"
)

// Defines values for PostProcessingEnginePluginRequestParamsContentType.
const (
	PostProcessingEnginePluginRequestParamsContentTypeApplicationjson PostProcessingEnginePluginRequestParamsContentType = "application/json"
)

// Defines values for GetExecuteInfluxQLQueryParamsAccept.
const (
	GetExecuteInfluxQLQueryParamsAcceptApplicationjson             GetExecuteInfluxQLQueryParamsAccept = "application/json"
	GetExecuteInfluxQLQueryParamsAcceptApplicationjsonl            GetExecuteInfluxQLQueryParamsAccept = "application/jsonl"
	GetExecuteInfluxQLQueryParamsAcceptApplicationvndApacheParquet GetExecuteInfluxQLQueryParamsAccept = "application/vnd.apache.parquet"
	GetExecuteInfluxQLQueryParamsAcceptTextcsv                     GetExecuteInfluxQLQueryParamsAccept = "text/csv"
)

// Defines values for PostExecuteQueryInfluxQLParamsAccept.
const (
	PostExecuteQueryInfluxQLParamsAcceptApplicationjson             PostExecuteQueryInfluxQLParamsAccept = "application/json"
	PostExecuteQueryInfluxQLParamsAcceptApplicationjsonl            PostExecuteQueryInfluxQLParamsAccept = "application/jsonl"
	PostExecuteQueryInfluxQLParamsAcceptApplicationvndApacheParquet PostExecuteQueryInfluxQLParamsAccept = "application/vnd.apache.parquet"
	PostExecuteQueryInfluxQLParamsAcceptTextcsv                     PostExecuteQueryInfluxQLParamsAccept = "text/csv"
)

// Defines values for PostExecuteQueryInfluxQLParamsContentType.
const (
	PostExecuteQueryInfluxQLParamsContentTypeApplicationjson PostExecuteQueryInfluxQLParamsContentType = "application/json"
)

// Defines values for GetExecuteQuerySQLParamsAccept.
const (
	GetExecuteQuerySQLParamsAcceptApplicationjson             GetExecuteQuerySQLParamsAccept = "application/json"
	GetExecuteQuerySQLParamsAcceptApplicationjsonl            GetExecuteQuerySQLParamsAccept = "application/jsonl"
	GetExecuteQuerySQLParamsAcceptApplicationvndApacheParquet GetExecuteQuerySQLParamsAccept = "application/vnd.apache.parquet"
	GetExecuteQuerySQLParamsAcceptTextcsv                     GetExecuteQuerySQLParamsAccept = "text/csv"
)

// Defines values for GetExecuteQuerySQLParamsContentType.
const (
	GetExecuteQuerySQLParamsContentTypeApplicationjson GetExecuteQuerySQLParamsContentType = "application/json"
)

// Defines values for PostExecuteQuerySQLParamsAccept.
const (
	PostExecuteQuerySQLParamsAcceptApplicationjson             PostExecuteQuerySQLParamsAccept = "application/json"
	PostExecuteQuerySQLParamsAcceptApplicationjsonl            PostExecuteQuerySQLParamsAccept = "application/jsonl"
	PostExecuteQuerySQLParamsAcceptApplicationvndApacheParquet PostExecuteQuerySQLParamsAccept = "application/vnd.apache.parquet"
	PostExecuteQuerySQLParamsAcceptTextcsv                     PostExecuteQuerySQLParamsAccept = "text/csv"
)

// Defines values for PostExecuteQuerySQLParamsContentType.
const (
	PostExecuteQuerySQLParamsContentTypeApplicationjson PostExecuteQuerySQLParamsContentType = "application/json"
)

// Defines values for PostWriteLPParamsAccept.
const (
	PostWriteLPParamsAcceptApplicationjson PostWriteLPParamsAccept = "application/json"
)

// Defines values for GetV1ExecuteQueryParamsAccept.
const (
	GetV1ExecuteQueryParamsAcceptApplicationcsv  GetV1ExecuteQueryParamsAccept = "application/csv"
	GetV1ExecuteQueryParamsAcceptApplicationjson GetV1ExecuteQueryParamsAccept = "application/json"
	GetV1ExecuteQueryParamsAcceptTextcsv         GetV1ExecuteQueryParamsAccept = "text/csv"
)

// Defines values for PostExecuteV1QueryParamsAccept.
const (
	PostExecuteV1QueryParamsAcceptApplicationcsv  PostExecuteV1QueryParamsAccept = "application/csv"
	PostExecuteV1QueryParamsAcceptApplicationjson PostExecuteV1QueryParamsAccept = "application/json"
	PostExecuteV1QueryParamsAcceptTextcsv         PostExecuteV1QueryParamsAccept = "text/csv"
)

// Defines values for PostExecuteV1QueryJSONBodyEpoch.
const (
	H  PostExecuteV1QueryJSONBodyEpoch = "h"
	M  PostExecuteV1QueryJSONBodyEpoch = "m"
	Ms PostExecuteV1QueryJSONBodyEpoch = "ms"
	Ns PostExecuteV1QueryJSONBodyEpoch = "ns"
	S  PostExecuteV1QueryJSONBodyEpoch = "s"
	U  PostExecuteV1QueryJSONBodyEpoch = "u"
	Μ  PostExecuteV1QueryJSONBodyEpoch = "µ"
)

// Defines values for PostV1WriteParamsAccept.
const (
	Applicationjson PostV1WriteParamsAccept = "application/json"
)

// AcceptPartial Accept partial writes.
type AcceptPartial = bool

// AdminTokenObject defines model for AdminTokenObject.
type AdminTokenObject struct {
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	Expiry    *interface{} `json:"expiry,omitempty"`
	Hash      *string      `json:"hash,omitempty"`
	Id        *int         `json:"id,omitempty"`
	Name      *string      `json:"name,omitempty"`
	Token     *string      `json:"token,omitempty"`
}

// ContentEncoding Content coding.
// Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.
type ContentEncoding string

// ContentLength The length in decimal number of octets.
type ContentLength = int

// CreateDatabaseRequest defines model for CreateDatabaseRequest.
type CreateDatabaseRequest struct {
	Db string `json:"db"`
}

// CreateTableRequest defines model for CreateTableRequest.
type CreateTableRequest struct {
	Db     string `json:"db"`
	Fields *[]struct {
		Name string                       `json:"name"`
		Type CreateTableRequestFieldsType `json:"type"`
	} `json:"fields,omitempty"`
	Table string   `json:"table"`
	Tags  []string `json:"tags"`
}

// CreateTableRequestFieldsType defines model for CreateTableRequest.Fields.Type.
type CreateTableRequestFieldsType string

// DistinctCacheCreateRequest defines model for DistinctCacheCreateRequest.
type DistinctCacheCreateRequest struct {
	Columns []string `json:"columns"`
	Db      string   `json:"db"`

	// MaxAge Optional maximum age in seconds.
	MaxAge *int `json:"max_age,omitempty"`

	// MaxCardinality Optional maximum cardinality.
	MaxCardinality *int `json:"max_cardinality,omitempty"`

	// Name Optional cache name.
	Name  *string `json:"name,omitempty"`
	Table string  `json:"table"`
}

// EpochCompatibility A unix timestamp precision.
// - `h` for hours
// - `m` for minutes
// - `s` for seconds
// - `ms` for milliseconds
// - `u` or `µ` for microseconds
// - `ns` for nanoseconds
type EpochCompatibility string

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Data  *map[string]interface{} `json:"data"`
	Error *string                 `json:"error,omitempty"`
}

// Format The format of data in the response body.
type Format string

// LastCacheCreateRequest defines model for LastCacheCreateRequest.
type LastCacheCreateRequest struct {
	// Count Optional count.
	Count *int   `json:"count,omitempty"`
	Db    string `json:"db"`

	// KeyColumns Optional list of key columns.
	KeyColumns *[]string `json:"key_columns,omitempty"`

	// Name Optional cache name.
	Name  *string `json:"name,omitempty"`
	Table string  `json:"table"`

	// Ttl Optional time-to-live in seconds.
	Ttl *int `json:"ttl,omitempty"`

	// ValueColumns Optional list of value columns.
	ValueColumns *[]string `json:"value_columns,omitempty"`
}

// LineProtocol `text/plain` is the content type for line protocol. `UTF-8` is the default character set.
type LineProtocol string

// NoSync Acknowledges a successful write without waiting for WAL persistence.
//
// #### Related
//
// - [Use the HTTP API and client libraries to write data](/influxdb3/core/write-data/api-client-libraries/)
// - [Data durability](/influxdb3/core/reference/internals/durability/)
type NoSync = bool

// PrecisionWrite The precision for unix timestamps in the line protocol batch.
type PrecisionWrite string

// PrecisionWriteCompatibility The precision for unix timestamps in the line protocol batch.
// Use `ms` for milliseconds, `s` for seconds, `us` for microseconds, or `ns` for nanoseconds.
type PrecisionWriteCompatibility string

// ProcessingEngineTriggerRequest defines model for ProcessingEngineTriggerRequest.
type ProcessingEngineTriggerRequest struct {
	Db string `json:"db"`

	// Disabled Whether the trigger is disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// PluginFilename The path and filename of the plugin to execute--for example,
	// `schedule.py` or `endpoints/report.py`.
	// The path can be absolute or relative to the `--plugins-dir` directory configured when starting InfluxDB 3.
	//
	// The plugin file must implement the trigger interface associated with the trigger's specification (`trigger_spec`).
	PluginFilename string `json:"plugin_filename"`

	// TriggerArguments Optional arguments passed to the plugin.
	TriggerArguments *map[string]interface{} `json:"trigger_arguments,omitempty"`
	TriggerName      string                  `json:"trigger_name"`

	// TriggerSpecification Specifies when and how the processing engine trigger should be invoked.
	//
	// ## Supported trigger specifications:
	//
	// ### Cron-based scheduling
	// Format: `cron:CRON_EXPRESSION`
	//
	// Uses extended (6-field) cron format (second minute hour day_of_month month day_of_week):
	// ```
	// ┌───────────── second (0-59)
	// │ ┌───────────── minute (0-59)
	// │ │ ┌───────────── hour (0-23)
	// │ │ │ ┌───────────── day of month (1-31)
	// │ │ │ │ ┌───────────── month (1-12)
	// │ │ │ │ │ ┌───────────── day of week (0-6, Sunday=0)
	// │ │ │ │ │ │
	// * * * * * *
	// ```
	// Examples:
	// - `cron:0 0 6 * * 1-5` - Every weekday at 6:00 AM
	// - `cron:0 30 14 * * 5` - Every Friday at 2:30 PM
	// - `cron:0 0 0 1 * *` - First day of every month at midnight
	//
	// ### Interval-based scheduling
	// Format: `every:DURATION`
	//
	// Supported durations: `s` (seconds), `m` (minutes), `h` (hours), `d` (days):
	// - `every:30s` - Every 30 seconds
	// - `every:5m` - Every 5 minutes
	// - `every:1h` - Every hour
	// - `every:1d` - Every day
	//
	// ### Table-based triggers
	// - `all_tables` - Triggers on write events to any table in the database
	// - `table:TABLE_NAME` - Triggers on write events to a specific table
	//
	// ### On-demand triggers
	// Format: `path:ENDPOINT_NAME`
	//
	// Creates an HTTP endpoint `/api/v3/engine/ENDPOINT_NAME` for manual invocation:
	// - `path:hello-world` - Creates endpoint `/api/v3/engine/hello-world`
	// - `path:data-export` - Creates endpoint `/api/v3/engine/data-export`
	TriggerSpecification string `json:"trigger_specification"`
}

// QueryRequestObject defines model for QueryRequestObject.
type QueryRequestObject struct {
	// Database The name of the database to query.
	// Required if the query (`query_str`) doesn't specify the database.
	Database string `json:"database"`

	// Format The format of the query results.
	Format *QueryRequestObjectFormat `json:"format,omitempty"`

	// Params Additional parameters for the query.
	// Use this field to pass query parameters.
	Params *map[string]interface{} `json:"params,omitempty"`

	// QueryStr The query to execute.
	QueryStr string `json:"query_str"`
}

// QueryRequestObjectFormat The format of the query results.
type QueryRequestObjectFormat string

// QueryResponse defines model for QueryResponse.
type QueryResponse struct {
	Results *[]map[string]interface{} `json:"results,omitempty"`
}

// ShowDatabasesResponse defines model for ShowDatabasesResponse.
type ShowDatabasesResponse struct {
	Databases *[]string `json:"databases,omitempty"`
}

// AcceptQueryHeader defines model for AcceptQueryHeader.
type AcceptQueryHeader string

// ContentType defines model for ContentType.
type ContentType string

// CompatibilityPrecisionParam The precision for unix timestamps in the line protocol batch.
// Use `ms` for milliseconds, `s` for seconds, `us` for microseconds, or `ns` for nanoseconds.
type CompatibilityPrecisionParam = PrecisionWriteCompatibility

// Db defines model for db.
type Db = string

// DbQueryParam defines model for dbQueryParam.
type DbQueryParam = string

// DbWriteParam defines model for dbWriteParam.
type DbWriteParam = string

// FormatRequired The format of data in the response body.
type FormatRequired = Format

// PrecisionParam The precision for unix timestamps in the line protocol batch.
type PrecisionParam = PrecisionWrite

// QuerySqlParam defines model for querySqlParam.
type QuerySqlParam = string

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorMessage

// QueryRequestBody defines model for queryRequestBody.
type QueryRequestBody = QueryRequestObject

// PostV2WriteTextBody defines parameters for PostV2Write.
type PostV2WriteTextBody = string

// PostV2WriteParams defines parameters for PostV2Write.
type PostV2WriteParams struct {
	// Db A database name.
	// InfluxDB creates the database if it doesn't already exist, and then
	// writes all points in the batch to the database.
	Db            string         `form:"db" json:"db"`
	AcceptPartial *AcceptPartial `form:"accept_partial,omitempty" json:"accept_partial,omitempty"`

	// Precision The precision for unix timestamps in the line protocol batch.
	Precision CompatibilityPrecisionParam `form:"precision" json:"precision"`

	// ContentType The content type of the request payload.
	ContentType *LineProtocol `json:"Content-Type,omitempty"`

	// ContentEncoding The compression applied to the line protocol in the request payload.
	// To send a gzip payload, pass `Content-Encoding: gzip` header.
	ContentEncoding *PostV2WriteParamsContentEncoding `json:"Content-Encoding,omitempty"`

	// ContentLength The size of the entity-body, in bytes, sent to InfluxDB.
	ContentLength *int `json:"Content-Length,omitempty"`

	// Accept The content type that the client can understand.
	// Writes only return a response body if they fail (partially or completely)--for example,
	// due to a syntax problem or type mismatch.
	Accept *PostV2WriteParamsAccept `json:"Accept,omitempty"`
}

// PostV2WriteParamsContentEncoding defines parameters for PostV2Write.
type PostV2WriteParamsContentEncoding string

// PostV2WriteParamsAccept defines parameters for PostV2Write.
type PostV2WriteParamsAccept string

// DeleteConfigureDatabaseParams defines parameters for DeleteConfigureDatabase.
type DeleteConfigureDatabaseParams struct {
	// Db The name of the database.
	Db Db `form:"db" json:"db"`
}

// GetConfigureDatabaseParams defines parameters for GetConfigureDatabase.
type GetConfigureDatabaseParams struct {
	Format FormatRequired `form:"format" json:"format"`
}

// DeleteConfigureLastCacheParams defines parameters for DeleteConfigureLastCache.
type DeleteConfigureLastCacheParams struct {
	// Db The name of the database.
	Db    Db     `form:"db" json:"db"`
	Table string `form:"table" json:"table"`
	Name  string `form:"name" json:"name"`
}

// PostInstallPluginPackagesJSONBody defines parameters for PostInstallPluginPackages.
type PostInstallPluginPackagesJSONBody struct {
	// Packages A list of Python package names to install.
	// Can include version specifiers (e.g., "scipy==1.9.0").
	Packages []string `json:"packages"`
}

// PostInstallPluginPackagesParams defines parameters for PostInstallPluginPackages.
type PostInstallPluginPackagesParams struct {
	// ContentType The format of the data in the request body.
	ContentType *PostInstallPluginPackagesParamsContentType `json:"Content-Type,omitempty"`
}

// PostInstallPluginPackagesParamsContentType defines parameters for PostInstallPluginPackages.
type PostInstallPluginPackagesParamsContentType string

// PostInstallPluginRequirementsJSONBody defines parameters for PostInstallPluginRequirements.
type PostInstallPluginRequirementsJSONBody struct {
	// RequirementsLocation The path to the requirements file containing Python packages to install.
	// Can be a relative path (relative to the plugin directory) or an absolute path.
	RequirementsLocation string `json:"requirements_location"`
}

// PostInstallPluginRequirementsParams defines parameters for PostInstallPluginRequirements.
type PostInstallPluginRequirementsParams struct {
	// ContentType The format of the data in the request body.
	ContentType *PostInstallPluginRequirementsParamsContentType `json:"Content-Type,omitempty"`
}

// PostInstallPluginRequirementsParamsContentType defines parameters for PostInstallPluginRequirements.
type PostInstallPluginRequirementsParamsContentType string

// DeleteConfigureProcessingEngineTriggerParams defines parameters for DeleteConfigureProcessingEngineTrigger.
type DeleteConfigureProcessingEngineTriggerParams struct {
	// Db The name of the database.
	Db          Db     `form:"db" json:"db"`
	TriggerName string `form:"trigger_name" json:"trigger_name"`
	Force       *bool  `form:"force,omitempty" json:"force,omitempty"`
}

// PostDisableProcessingEngineTriggerParams defines parameters for PostDisableProcessingEngineTrigger.
type PostDisableProcessingEngineTriggerParams struct {
	// ContentType The format of the data in the request body.
	ContentType *PostDisableProcessingEngineTriggerParamsContentType `json:"Content-Type,omitempty"`
}

// PostDisableProcessingEngineTriggerParamsContentType defines parameters for PostDisableProcessingEngineTrigger.
type PostDisableProcessingEngineTriggerParamsContentType string

// PostEnableProcessingEngineTriggerParams defines parameters for PostEnableProcessingEngineTrigger.
type PostEnableProcessingEngineTriggerParams struct {
	// ContentType The format of the data in the request body.
	ContentType *PostEnableProcessingEngineTriggerParamsContentType `json:"Content-Type,omitempty"`
}

// PostEnableProcessingEngineTriggerParamsContentType defines parameters for PostEnableProcessingEngineTrigger.
type PostEnableProcessingEngineTriggerParamsContentType string

// DeleteConfigureTableParams defines parameters for DeleteConfigureTable.
type DeleteConfigureTableParams struct {
	// Db The name of the database.
	Db    Db     `form:"db" json:"db"`
	Table string `form:"table" json:"table"`
}

// PostProcessingEnginePluginRequestJSONBody defines parameters for PostProcessingEnginePluginRequest.
type PostProcessingEnginePluginRequestJSONBody map[string]interface{}

// PostProcessingEnginePluginRequestParams defines parameters for PostProcessingEnginePluginRequest.
type PostProcessingEnginePluginRequestParams struct {
	// ContentType The format of the data in the request body.
	ContentType *PostProcessingEnginePluginRequestParamsContentType `json:"Content-Type,omitempty"`
}

// PostProcessingEnginePluginRequestParamsContentType defines parameters for PostProcessingEnginePluginRequest.
type PostProcessingEnginePluginRequestParamsContentType string

// GetExecuteInfluxQLQueryParams defines parameters for GetExecuteInfluxQLQuery.
type GetExecuteInfluxQLQueryParams struct {
	// Db The name of the database.
	//
	// If you provide a query that specifies the database, you can omit the 'db' parameter from your request.
	Db     *DbQueryParam `form:"db,omitempty" json:"db,omitempty"`
	Q      string        `form:"q" json:"q"`
	Format *string       `form:"format,omitempty" json:"format,omitempty"`

	// Accept The content type that the client can understand.
	Accept *GetExecuteInfluxQLQueryParamsAccept `json:"Accept,omitempty"`
}

// GetExecuteInfluxQLQueryParamsAccept defines parameters for GetExecuteInfluxQLQuery.
type GetExecuteInfluxQLQueryParamsAccept string

// PostExecuteQueryInfluxQLParams defines parameters for PostExecuteQueryInfluxQL.
type PostExecuteQueryInfluxQLParams struct {
	// Accept The content type that the client can understand.
	Accept *PostExecuteQueryInfluxQLParamsAccept `json:"Accept,omitempty"`

	// ContentType The format of the data in the request body.
	ContentType *PostExecuteQueryInfluxQLParamsContentType `json:"Content-Type,omitempty"`
}

// PostExecuteQueryInfluxQLParamsAccept defines parameters for PostExecuteQueryInfluxQL.
type PostExecuteQueryInfluxQLParamsAccept string

// PostExecuteQueryInfluxQLParamsContentType defines parameters for PostExecuteQueryInfluxQL.
type PostExecuteQueryInfluxQLParamsContentType string

// GetExecuteQuerySQLParams defines parameters for GetExecuteQuerySQL.
type GetExecuteQuerySQLParams struct {
	// Db The name of the database.
	Db Db `form:"db" json:"db"`

	// Q The query to execute.
	Q      QuerySqlParam `form:"q" json:"q"`
	Format *Format       `form:"format,omitempty" json:"format,omitempty"`

	// Accept The content type that the client can understand.
	Accept *GetExecuteQuerySQLParamsAccept `json:"Accept,omitempty"`

	// ContentType The format of the data in the request body.
	ContentType *GetExecuteQuerySQLParamsContentType `json:"Content-Type,omitempty"`
}

// GetExecuteQuerySQLParamsAccept defines parameters for GetExecuteQuerySQL.
type GetExecuteQuerySQLParamsAccept string

// GetExecuteQuerySQLParamsContentType defines parameters for GetExecuteQuerySQL.
type GetExecuteQuerySQLParamsContentType string

// PostExecuteQuerySQLParams defines parameters for PostExecuteQuerySQL.
type PostExecuteQuerySQLParams struct {
	// Accept The content type that the client can understand.
	Accept *PostExecuteQuerySQLParamsAccept `json:"Accept,omitempty"`

	// ContentType The format of the data in the request body.
	ContentType *PostExecuteQuerySQLParamsContentType `json:"Content-Type,omitempty"`
}

// PostExecuteQuerySQLParamsAccept defines parameters for PostExecuteQuerySQL.
type PostExecuteQuerySQLParamsAccept string

// PostExecuteQuerySQLParamsContentType defines parameters for PostExecuteQuerySQL.
type PostExecuteQuerySQLParamsContentType string

// PostWriteLPTextBody defines parameters for PostWriteLP.
type PostWriteLPTextBody = string

// PostWriteLPParams defines parameters for PostWriteLP.
type PostWriteLPParams struct {
	// Db The name of the database.
	// InfluxDB creates the database if it doesn't already exist, and then
	// writes all points in the batch to the database.
	Db            DbWriteParam   `form:"db" json:"db"`
	AcceptPartial *AcceptPartial `form:"accept_partial,omitempty" json:"accept_partial,omitempty"`

	// Precision The precision for unix timestamps in the line protocol batch.
	Precision PrecisionParam `form:"precision" json:"precision"`
	NoSync    *NoSync        `form:"no_sync,omitempty" json:"no_sync,omitempty"`

	// ContentType The content type of the request payload.
	ContentType *LineProtocol `json:"Content-Type,omitempty"`

	// Accept The content type that the client can understand.
	// Writes only return a response body if they fail (partially or completely)--for example,
	// due to a syntax problem or type mismatch.
	Accept *PostWriteLPParamsAccept `json:"Accept,omitempty"`

	// ContentEncoding The compression applied to the line protocol in the request payload.
	// To send a gzip payload, pass `Content-Encoding: gzip` header.
	ContentEncoding *ContentEncoding `json:"Content-Encoding,omitempty"`

	// ContentLength The size of the entity-body, in bytes, sent to InfluxDB.
	ContentLength *ContentLength `json:"Content-Length,omitempty"`
}

// PostWriteLPParamsAccept defines parameters for PostWriteLP.
type PostWriteLPParamsAccept string

// GetV1ExecuteQueryParams defines parameters for GetV1ExecuteQuery.
type GetV1ExecuteQueryParams struct {
	// Chunked If true, the response is divided into chunks of size `chunk_size`.
	Chunked *bool `form:"chunked,omitempty" json:"chunked,omitempty"`

	// ChunkSize The number of records that will go into a chunk.
	// This parameter is only used if `chunked=true`.
	ChunkSize *int `form:"chunk_size,omitempty" json:"chunk_size,omitempty"`

	// Db The database to query. If not provided, the InfluxQL query string must specify the database.
	Db *string `form:"db,omitempty" json:"db,omitempty"`

	// Pretty If true, the JSON response is formatted in a human-readable format.
	Pretty *bool `form:"pretty,omitempty" json:"pretty,omitempty"`

	// Q The InfluxQL query string.
	Q string `form:"q" json:"q"`

	// Epoch Formats timestamps as [unix (epoch) timestamps](/influxdb3/core/reference/glossary/#unix-timestamp) with the specified precision
	// instead of [RFC3339 timestamps](/influxdb3/core/reference/glossary/#rfc3339-timestamp) with nanosecond precision.
	Epoch *EpochCompatibility `form:"epoch,omitempty" json:"epoch,omitempty"`

	// Accept The content type that the client can understand.
	//
	// If `text/csv` is specified, the `Content-type` response header is `application/csv` and the response is formatted as CSV.
	//
	// Returns an error if the format is invalid or non-UTF8.
	Accept *GetV1ExecuteQueryParamsAccept `json:"Accept,omitempty"`
}

// GetV1ExecuteQueryParamsAccept defines parameters for GetV1ExecuteQuery.
type GetV1ExecuteQueryParamsAccept string

// PostExecuteV1QueryJSONBody defines parameters for PostExecuteV1Query.
type PostExecuteV1QueryJSONBody struct {
	// ChunkSize The number of records that will go into a chunk.
	// This parameter is only used if `chunked=true`.
	ChunkSize *int `json:"chunk_size,omitempty"`

	// Chunked If true, the response is divided into chunks of size `chunk_size`.
	Chunked *bool `json:"chunked,omitempty"`

	// Db The database to query. If not provided, the InfluxQL query string must specify the database.
	Db *string `json:"db,omitempty"`

	// Epoch A unix timestamp precision.
	//
	// - `h` for hours
	// - `m` for minutes
	// - `s` for seconds
	// - `ms` for milliseconds
	// - `u` or `µ` for microseconds
	// - `ns` for nanoseconds
	//
	// Formats timestamps as [unix (epoch) timestamps](/influxdb3/core/reference/glossary/#unix-timestamp) with the specified precision
	// instead of [RFC3339 timestamps](/influxdb3/core/reference/glossary/#rfc3339-timestamp) with nanosecond precision.
	Epoch *PostExecuteV1QueryJSONBodyEpoch `json:"epoch,omitempty"`

	// Pretty If true, the JSON response is formatted in a human-readable format.
	Pretty *bool `json:"pretty,omitempty"`

	// Q The InfluxQL query string.
	Q string `json:"q"`
}

// PostExecuteV1QueryParams defines parameters for PostExecuteV1Query.
type PostExecuteV1QueryParams struct {
	// Accept The content type that the client can understand.
	//
	// If `text/csv` is specified, the `Content-type` response header is `application/csv` and the response is formatted as CSV.
	//
	// Returns an error if the format is invalid or non-UTF8.
	Accept *PostExecuteV1QueryParamsAccept `json:"Accept,omitempty"`
}

// PostExecuteV1QueryParamsAccept defines parameters for PostExecuteV1Query.
type PostExecuteV1QueryParamsAccept string

// PostExecuteV1QueryJSONBodyEpoch defines parameters for PostExecuteV1Query.
type PostExecuteV1QueryJSONBodyEpoch string

// PostV1WriteTextBody defines parameters for PostV1Write.
type PostV1WriteTextBody = string

// PostV1WriteParams defines parameters for PostV1Write.
type PostV1WriteParams struct {
	// Db The name of the database.
	// InfluxDB creates the database if it doesn't already exist, and then
	// writes all points in the batch to the database.
	Db DbWriteParam `form:"db" json:"db"`

	// Precision The precision for unix timestamps in the line protocol batch.
	Precision CompatibilityPrecisionParam `form:"precision" json:"precision"`

	// ContentType The content type of the request payload.
	ContentType *LineProtocol `json:"Content-Type,omitempty"`

	// Accept The content type that the client can understand.
	// Writes only return a response body if they fail (partially or completely)--for example,
	// due to a syntax problem or type mismatch.
	Accept *PostV1WriteParamsAccept `json:"Accept,omitempty"`

	// ContentEncoding The compression applied to the line protocol in the request payload.
	// To send a gzip payload, pass `Content-Encoding: gzip` header.
	ContentEncoding *ContentEncoding `json:"Content-Encoding,omitempty"`

	// ContentLength The size of the entity-body, in bytes, sent to InfluxDB.
	ContentLength *ContentLength `json:"Content-Length,omitempty"`
}

// PostV1WriteParamsAccept defines parameters for PostV1Write.
type PostV1WriteParamsAccept string

// PostV2WriteTextRequestBody defines body for PostV2Write for text/plain ContentType.
type PostV2WriteTextRequestBody = PostV2WriteTextBody

// PostConfigureDatabaseJSONRequestBody defines body for PostConfigureDatabase for application/json ContentType.
type PostConfigureDatabaseJSONRequestBody = CreateDatabaseRequest

// PostConfigureDistinctCacheJSONRequestBody defines body for PostConfigureDistinctCache for application/json ContentType.
type PostConfigureDistinctCacheJSONRequestBody = DistinctCacheCreateRequest

// PostConfigureLastCacheJSONRequestBody defines body for PostConfigureLastCache for application/json ContentType.
type PostConfigureLastCacheJSONRequestBody = LastCacheCreateRequest

// PostInstallPluginPackagesJSONRequestBody defines body for PostInstallPluginPackages for application/json ContentType.
type PostInstallPluginPackagesJSONRequestBody PostInstallPluginPackagesJSONBody

// PostInstallPluginRequirementsJSONRequestBody defines body for PostInstallPluginRequirements for application/json ContentType.
type PostInstallPluginRequirementsJSONRequestBody PostInstallPluginRequirementsJSONBody

// PostConfigureProcessingEngineTriggerJSONRequestBody defines body for PostConfigureProcessingEngineTrigger for application/json ContentType.
type PostConfigureProcessingEngineTriggerJSONRequestBody = ProcessingEngineTriggerRequest

// PostDisableProcessingEngineTriggerJSONRequestBody defines body for PostDisableProcessingEngineTrigger for application/json ContentType.
type PostDisableProcessingEngineTriggerJSONRequestBody = ProcessingEngineTriggerRequest

// PostEnableProcessingEngineTriggerJSONRequestBody defines body for PostEnableProcessingEngineTrigger for application/json ContentType.
type PostEnableProcessingEngineTriggerJSONRequestBody = ProcessingEngineTriggerRequest

// PostConfigureTableJSONRequestBody defines body for PostConfigureTable for application/json ContentType.
type PostConfigureTableJSONRequestBody = CreateTableRequest

// PostProcessingEnginePluginRequestJSONRequestBody defines body for PostProcessingEnginePluginRequest for application/json ContentType.
type PostProcessingEnginePluginRequestJSONRequestBody PostProcessingEnginePluginRequestJSONBody

// PostExecuteQueryInfluxQLJSONRequestBody defines body for PostExecuteQueryInfluxQL for application/json ContentType.
type PostExecuteQueryInfluxQLJSONRequestBody = QueryRequestObject

// PostExecuteQuerySQLJSONRequestBody defines body for PostExecuteQuerySQL for application/json ContentType.
type PostExecuteQuerySQLJSONRequestBody = QueryRequestObject

// PostWriteLPTextRequestBody defines body for PostWriteLP for text/plain ContentType.
type PostWriteLPTextRequestBody = PostWriteLPTextBody

// PostExecuteV1QueryJSONRequestBody defines body for PostExecuteV1Query for application/json ContentType.
type PostExecuteV1QueryJSONRequestBody PostExecuteV1QueryJSONBody

// PostV1WriteTextRequestBody defines body for PostV1Write for text/plain ContentType.
type PostV1WriteTextRequestBody = PostV1WriteTextBody
