// Package core provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package core

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealthV1 request
	GetHealthV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2WriteWithBody request with any body
	PostV2WriteWithBody(ctx context.Context, params *PostV2WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2WriteWithTextBody(ctx context.Context, params *PostV2WriteParams, body PostV2WriteTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfigureDatabase request
	DeleteConfigureDatabase(ctx context.Context, params *DeleteConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigureDatabase request
	GetConfigureDatabase(ctx context.Context, params *GetConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigureDatabaseWithBody request with any body
	PostConfigureDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigureDatabase(ctx context.Context, body PostConfigureDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigureDistinctCacheWithBody request with any body
	PostConfigureDistinctCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigureDistinctCache(ctx context.Context, body PostConfigureDistinctCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfigureLastCache request
	DeleteConfigureLastCache(ctx context.Context, params *DeleteConfigureLastCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigureLastCacheWithBody request with any body
	PostConfigureLastCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigureLastCache(ctx context.Context, body PostConfigureLastCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstallPluginPackagesWithBody request with any body
	PostInstallPluginPackagesWithBody(ctx context.Context, params *PostInstallPluginPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstallPluginPackages(ctx context.Context, params *PostInstallPluginPackagesParams, body PostInstallPluginPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstallPluginRequirementsWithBody request with any body
	PostInstallPluginRequirementsWithBody(ctx context.Context, params *PostInstallPluginRequirementsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstallPluginRequirements(ctx context.Context, params *PostInstallPluginRequirementsParams, body PostInstallPluginRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfigureProcessingEngineTrigger request
	DeleteConfigureProcessingEngineTrigger(ctx context.Context, params *DeleteConfigureProcessingEngineTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigureProcessingEngineTriggerWithBody request with any body
	PostConfigureProcessingEngineTriggerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigureProcessingEngineTrigger(ctx context.Context, body PostConfigureProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDisableProcessingEngineTriggerWithBody request with any body
	PostDisableProcessingEngineTriggerWithBody(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDisableProcessingEngineTrigger(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, body PostDisableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnableProcessingEngineTriggerWithBody request with any body
	PostEnableProcessingEngineTriggerWithBody(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnableProcessingEngineTrigger(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, body PostEnableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfigureTable request
	DeleteConfigureTable(ctx context.Context, params *DeleteConfigureTableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigureTableWithBody request with any body
	PostConfigureTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfigureTable(ctx context.Context, body PostConfigureTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreateAdminToken request
	PostCreateAdminToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegenerateAdminToken request
	PostRegenerateAdminToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProcessingEnginePluginRequest request
	GetProcessingEnginePluginRequest(ctx context.Context, pluginPath string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProcessingEnginePluginRequestWithBody request with any body
	PostProcessingEnginePluginRequestWithBody(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProcessingEnginePluginRequest(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, body PostProcessingEnginePluginRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTestSchedulingPlugin request
	PostTestSchedulingPlugin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTestWALPlugin request
	PostTestWALPlugin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecuteInfluxQLQuery request
	GetExecuteInfluxQLQuery(ctx context.Context, params *GetExecuteInfluxQLQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecuteQueryInfluxQLWithBody request with any body
	PostExecuteQueryInfluxQLWithBody(ctx context.Context, params *PostExecuteQueryInfluxQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecuteQueryInfluxQL(ctx context.Context, params *PostExecuteQueryInfluxQLParams, body PostExecuteQueryInfluxQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExecuteQuerySQL request
	GetExecuteQuerySQL(ctx context.Context, params *GetExecuteQuerySQLParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecuteQuerySQLWithBody request with any body
	PostExecuteQuerySQLWithBody(ctx context.Context, params *PostExecuteQuerySQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecuteQuerySQL(ctx context.Context, params *PostExecuteQuerySQLParams, body PostExecuteQuerySQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWriteLPWithBody request with any body
	PostWriteLPWithBody(ctx context.Context, params *PostWriteLPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWriteLPWithTextBody(ctx context.Context, params *PostWriteLPParams, body PostWriteLPTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetrics request
	GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ExecuteQuery request
	GetV1ExecuteQuery(ctx context.Context, params *GetV1ExecuteQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExecuteV1QueryWithBody request with any body
	PostExecuteV1QueryWithBody(ctx context.Context, params *PostExecuteV1QueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExecuteV1Query(ctx context.Context, params *PostExecuteV1QueryParams, body PostExecuteV1QueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1WriteWithBody request with any body
	PostV1WriteWithBody(ctx context.Context, params *PostV1WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1WriteWithTextBody(ctx context.Context, params *PostV1WriteParams, body PostV1WriteTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealthV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2WriteWithBody(ctx context.Context, params *PostV2WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2WriteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2WriteWithTextBody(ctx context.Context, params *PostV2WriteParams, body PostV2WriteTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2WriteRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfigureDatabase(ctx context.Context, params *DeleteConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigureDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigureDatabase(ctx context.Context, params *GetConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigureDatabaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureDatabaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureDatabase(ctx context.Context, body PostConfigureDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureDatabaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureDistinctCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureDistinctCacheRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureDistinctCache(ctx context.Context, body PostConfigureDistinctCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureDistinctCacheRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfigureLastCache(ctx context.Context, params *DeleteConfigureLastCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigureLastCacheRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureLastCacheWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureLastCacheRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureLastCache(ctx context.Context, body PostConfigureLastCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureLastCacheRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallPluginPackagesWithBody(ctx context.Context, params *PostInstallPluginPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallPluginPackagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallPluginPackages(ctx context.Context, params *PostInstallPluginPackagesParams, body PostInstallPluginPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallPluginPackagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallPluginRequirementsWithBody(ctx context.Context, params *PostInstallPluginRequirementsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallPluginRequirementsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstallPluginRequirements(ctx context.Context, params *PostInstallPluginRequirementsParams, body PostInstallPluginRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstallPluginRequirementsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfigureProcessingEngineTrigger(ctx context.Context, params *DeleteConfigureProcessingEngineTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigureProcessingEngineTriggerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureProcessingEngineTriggerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureProcessingEngineTriggerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureProcessingEngineTrigger(ctx context.Context, body PostConfigureProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureProcessingEngineTriggerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisableProcessingEngineTriggerWithBody(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisableProcessingEngineTriggerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisableProcessingEngineTrigger(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, body PostDisableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisableProcessingEngineTriggerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnableProcessingEngineTriggerWithBody(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnableProcessingEngineTriggerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnableProcessingEngineTrigger(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, body PostEnableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnableProcessingEngineTriggerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfigureTable(ctx context.Context, params *DeleteConfigureTableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigureTableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureTableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigureTable(ctx context.Context, body PostConfigureTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigureTableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateAdminToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateAdminTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegenerateAdminToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegenerateAdminTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProcessingEnginePluginRequest(ctx context.Context, pluginPath string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProcessingEnginePluginRequestRequest(c.Server, pluginPath)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessingEnginePluginRequestWithBody(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessingEnginePluginRequestRequestWithBody(c.Server, pluginPath, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProcessingEnginePluginRequest(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, body PostProcessingEnginePluginRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProcessingEnginePluginRequestRequest(c.Server, pluginPath, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTestSchedulingPlugin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTestSchedulingPluginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTestWALPlugin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTestWALPluginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecuteInfluxQLQuery(ctx context.Context, params *GetExecuteInfluxQLQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecuteInfluxQLQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteQueryInfluxQLWithBody(ctx context.Context, params *PostExecuteQueryInfluxQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteQueryInfluxQLRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteQueryInfluxQL(ctx context.Context, params *PostExecuteQueryInfluxQLParams, body PostExecuteQueryInfluxQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteQueryInfluxQLRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExecuteQuerySQL(ctx context.Context, params *GetExecuteQuerySQLParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExecuteQuerySQLRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteQuerySQLWithBody(ctx context.Context, params *PostExecuteQuerySQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteQuerySQLRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteQuerySQL(ctx context.Context, params *PostExecuteQuerySQLParams, body PostExecuteQuerySQLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteQuerySQLRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWriteLPWithBody(ctx context.Context, params *PostWriteLPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWriteLPRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWriteLPWithTextBody(ctx context.Context, params *PostWriteLPParams, body PostWriteLPTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWriteLPRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ExecuteQuery(ctx context.Context, params *GetV1ExecuteQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ExecuteQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteV1QueryWithBody(ctx context.Context, params *PostExecuteV1QueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteV1QueryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExecuteV1Query(ctx context.Context, params *PostExecuteV1QueryParams, body PostExecuteV1QueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExecuteV1QueryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WriteWithBody(ctx context.Context, params *PostV1WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WriteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WriteWithTextBody(ctx context.Context, params *PostV1WriteParams, body PostV1WriteTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WriteRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthV1Request generates requests for GetHealthV1
func NewGetHealthV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2WriteRequestWithTextBody calls the generic PostV2Write builder with text/plain body
func NewPostV2WriteRequestWithTextBody(server string, params *PostV2WriteParams, body PostV2WriteTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostV2WriteRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPostV2WriteRequestWithBody generates requests for PostV2Write with any type of body
func NewPostV2WriteRequestWithBody(server string, params *PostV2WriteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/write")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AcceptPartial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accept_partial", runtime.ParamLocationQuery, *params.AcceptPartial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "precision", runtime.ParamLocationQuery, params.Precision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

		if params.ContentEncoding != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam1)
		}

		if params.ContentLength != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, *params.ContentLength)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Length", headerParam2)
		}

		if params.Accept != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam3)
		}

	}

	return req, nil
}

// NewDeleteConfigureDatabaseRequest generates requests for DeleteConfigureDatabase
func NewDeleteConfigureDatabaseRequest(server string, params *DeleteConfigureDatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigureDatabaseRequest generates requests for GetConfigureDatabase
func NewGetConfigureDatabaseRequest(server string, params *GetConfigureDatabaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigureDatabaseRequest calls the generic PostConfigureDatabase builder with application/json body
func NewPostConfigureDatabaseRequest(server string, body PostConfigureDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigureDatabaseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigureDatabaseRequestWithBody generates requests for PostConfigureDatabase with any type of body
func NewPostConfigureDatabaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConfigureDistinctCacheRequest calls the generic PostConfigureDistinctCache builder with application/json body
func NewPostConfigureDistinctCacheRequest(server string, body PostConfigureDistinctCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigureDistinctCacheRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigureDistinctCacheRequestWithBody generates requests for PostConfigureDistinctCache with any type of body
func NewPostConfigureDistinctCacheRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/distinct_cache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConfigureLastCacheRequest generates requests for DeleteConfigureLastCache
func NewDeleteConfigureLastCacheRequest(server string, params *DeleteConfigureLastCacheParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/last_cache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "table", runtime.ParamLocationQuery, params.Table); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigureLastCacheRequest calls the generic PostConfigureLastCache builder with application/json body
func NewPostConfigureLastCacheRequest(server string, body PostConfigureLastCacheJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigureLastCacheRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigureLastCacheRequestWithBody generates requests for PostConfigureLastCache with any type of body
func NewPostConfigureLastCacheRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/last_cache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstallPluginPackagesRequest calls the generic PostInstallPluginPackages builder with application/json body
func NewPostInstallPluginPackagesRequest(server string, params *PostInstallPluginPackagesParams, body PostInstallPluginPackagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstallPluginPackagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInstallPluginPackagesRequestWithBody generates requests for PostInstallPluginPackages with any type of body
func NewPostInstallPluginPackagesRequestWithBody(server string, params *PostInstallPluginPackagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/plugin_environment/install_packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewPostInstallPluginRequirementsRequest calls the generic PostInstallPluginRequirements builder with application/json body
func NewPostInstallPluginRequirementsRequest(server string, params *PostInstallPluginRequirementsParams, body PostInstallPluginRequirementsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstallPluginRequirementsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInstallPluginRequirementsRequestWithBody generates requests for PostInstallPluginRequirements with any type of body
func NewPostInstallPluginRequirementsRequestWithBody(server string, params *PostInstallPluginRequirementsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/plugin_environment/install_requirements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConfigureProcessingEngineTriggerRequest generates requests for DeleteConfigureProcessingEngineTrigger
func NewDeleteConfigureProcessingEngineTriggerRequest(server string, params *DeleteConfigureProcessingEngineTriggerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/processing_engine_trigger")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_name", runtime.ParamLocationQuery, params.TriggerName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigureProcessingEngineTriggerRequest calls the generic PostConfigureProcessingEngineTrigger builder with application/json body
func NewPostConfigureProcessingEngineTriggerRequest(server string, body PostConfigureProcessingEngineTriggerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigureProcessingEngineTriggerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigureProcessingEngineTriggerRequestWithBody generates requests for PostConfigureProcessingEngineTrigger with any type of body
func NewPostConfigureProcessingEngineTriggerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/processing_engine_trigger")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDisableProcessingEngineTriggerRequest calls the generic PostDisableProcessingEngineTrigger builder with application/json body
func NewPostDisableProcessingEngineTriggerRequest(server string, params *PostDisableProcessingEngineTriggerParams, body PostDisableProcessingEngineTriggerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDisableProcessingEngineTriggerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDisableProcessingEngineTriggerRequestWithBody generates requests for PostDisableProcessingEngineTrigger with any type of body
func NewPostDisableProcessingEngineTriggerRequestWithBody(server string, params *PostDisableProcessingEngineTriggerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/processing_engine_trigger/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewPostEnableProcessingEngineTriggerRequest calls the generic PostEnableProcessingEngineTrigger builder with application/json body
func NewPostEnableProcessingEngineTriggerRequest(server string, params *PostEnableProcessingEngineTriggerParams, body PostEnableProcessingEngineTriggerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnableProcessingEngineTriggerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostEnableProcessingEngineTriggerRequestWithBody generates requests for PostEnableProcessingEngineTrigger with any type of body
func NewPostEnableProcessingEngineTriggerRequestWithBody(server string, params *PostEnableProcessingEngineTriggerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/processing_engine_trigger/enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConfigureTableRequest generates requests for DeleteConfigureTable
func NewDeleteConfigureTableRequest(server string, params *DeleteConfigureTableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/table")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "table", runtime.ParamLocationQuery, params.Table); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigureTableRequest calls the generic PostConfigureTable builder with application/json body
func NewPostConfigureTableRequest(server string, body PostConfigureTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigureTableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigureTableRequestWithBody generates requests for PostConfigureTable with any type of body
func NewPostConfigureTableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/table")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCreateAdminTokenRequest generates requests for PostCreateAdminToken
func NewPostCreateAdminTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/token/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegenerateAdminTokenRequest generates requests for PostRegenerateAdminToken
func NewPostRegenerateAdminTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/configure/token/admin/regenerate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProcessingEnginePluginRequestRequest generates requests for GetProcessingEnginePluginRequest
func NewGetProcessingEnginePluginRequestRequest(server string, pluginPath string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plugin_path", runtime.ParamLocationPath, pluginPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/engine/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProcessingEnginePluginRequestRequest calls the generic PostProcessingEnginePluginRequest builder with application/json body
func NewPostProcessingEnginePluginRequestRequest(server string, pluginPath string, params *PostProcessingEnginePluginRequestParams, body PostProcessingEnginePluginRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProcessingEnginePluginRequestRequestWithBody(server, pluginPath, params, "application/json", bodyReader)
}

// NewPostProcessingEnginePluginRequestRequestWithBody generates requests for PostProcessingEnginePluginRequest with any type of body
func NewPostProcessingEnginePluginRequestRequestWithBody(server string, pluginPath string, params *PostProcessingEnginePluginRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plugin_path", runtime.ParamLocationPath, pluginPath)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/engine/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewPostTestSchedulingPluginRequest generates requests for PostTestSchedulingPlugin
func NewPostTestSchedulingPluginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/plugin_test/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTestWALPluginRequest generates requests for PostTestWALPlugin
func NewPostTestWALPluginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/plugin_test/wal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExecuteInfluxQLQueryRequest generates requests for GetExecuteInfluxQLQuery
func NewGetExecuteInfluxQLQueryRequest(server string, params *GetExecuteInfluxQLQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/query_influxql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Db != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, *params.Db); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewPostExecuteQueryInfluxQLRequest calls the generic PostExecuteQueryInfluxQL builder with application/json body
func NewPostExecuteQueryInfluxQLRequest(server string, params *PostExecuteQueryInfluxQLParams, body PostExecuteQueryInfluxQLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecuteQueryInfluxQLRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostExecuteQueryInfluxQLRequestWithBody generates requests for PostExecuteQueryInfluxQL with any type of body
func NewPostExecuteQueryInfluxQLRequestWithBody(server string, params *PostExecuteQueryInfluxQLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/query_influxql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		if params.ContentType != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam1)
		}

	}

	return req, nil
}

// NewGetExecuteQuerySQLRequest generates requests for GetExecuteQuerySQL
func NewGetExecuteQuerySQLRequest(server string, params *GetExecuteQuerySQLParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/query_sql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		if params.ContentType != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam1)
		}

	}

	return req, nil
}

// NewPostExecuteQuerySQLRequest calls the generic PostExecuteQuerySQL builder with application/json body
func NewPostExecuteQuerySQLRequest(server string, params *PostExecuteQuerySQLParams, body PostExecuteQuerySQLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecuteQuerySQLRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostExecuteQuerySQLRequestWithBody generates requests for PostExecuteQuerySQL with any type of body
func NewPostExecuteQuerySQLRequestWithBody(server string, params *PostExecuteQuerySQLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/query_sql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

		if params.ContentType != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam1)
		}

	}

	return req, nil
}

// NewPostWriteLPRequestWithTextBody calls the generic PostWriteLP builder with text/plain body
func NewPostWriteLPRequestWithTextBody(server string, params *PostWriteLPParams, body PostWriteLPTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostWriteLPRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPostWriteLPRequestWithBody generates requests for PostWriteLP with any type of body
func NewPostWriteLPRequestWithBody(server string, params *PostWriteLPParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v3/write_lp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.AcceptPartial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accept_partial", runtime.ParamLocationQuery, *params.AcceptPartial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "precision", runtime.ParamLocationQuery, params.Precision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NoSync != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "no_sync", runtime.ParamLocationQuery, *params.NoSync); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

		if params.ContentEncoding != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam2)
		}

		if params.ContentLength != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, *params.ContentLength)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Length", headerParam3)
		}

	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricsRequest generates requests for GetMetrics
func NewGetMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ExecuteQueryRequest generates requests for GetV1ExecuteQuery
func NewGetV1ExecuteQueryRequest(server string, params *GetV1ExecuteQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Chunked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chunked", runtime.ParamLocationQuery, *params.Chunked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChunkSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chunk_size", runtime.ParamLocationQuery, *params.ChunkSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Db != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, *params.Db); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pretty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty", runtime.ParamLocationQuery, *params.Pretty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Epoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "epoch", runtime.ParamLocationQuery, *params.Epoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewPostExecuteV1QueryRequest calls the generic PostExecuteV1Query builder with application/json body
func NewPostExecuteV1QueryRequest(server string, params *PostExecuteV1QueryParams, body PostExecuteV1QueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExecuteV1QueryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostExecuteV1QueryRequestWithBody generates requests for PostExecuteV1Query with any type of body
func NewPostExecuteV1QueryRequestWithBody(server string, params *PostExecuteV1QueryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewPostV1WriteRequestWithTextBody calls the generic PostV1Write builder with text/plain body
func NewPostV1WriteRequestWithTextBody(server string, params *PostV1WriteParams, body PostV1WriteTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostV1WriteRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPostV1WriteRequestWithBody generates requests for PostV1Write with any type of body
func NewPostV1WriteRequestWithBody(server string, params *PostV1WriteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/write")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "db", runtime.ParamLocationQuery, params.Db); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "precision", runtime.ParamLocationQuery, params.Precision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

		if params.ContentEncoding != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam2)
		}

		if params.ContentLength != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Content-Length", runtime.ParamLocationHeader, *params.ContentLength)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Length", headerParam3)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealthV1WithResponse request
	GetHealthV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthV1Response, error)

	// PostV2WriteWithBodyWithResponse request with any body
	PostV2WriteWithBodyWithResponse(ctx context.Context, params *PostV2WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2WriteResponse, error)

	PostV2WriteWithTextBodyWithResponse(ctx context.Context, params *PostV2WriteParams, body PostV2WriteTextRequestBody, reqEditors ...RequestEditorFn) (*PostV2WriteResponse, error)

	// DeleteConfigureDatabaseWithResponse request
	DeleteConfigureDatabaseWithResponse(ctx context.Context, params *DeleteConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*DeleteConfigureDatabaseResponse, error)

	// GetConfigureDatabaseWithResponse request
	GetConfigureDatabaseWithResponse(ctx context.Context, params *GetConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*GetConfigureDatabaseResponse, error)

	// PostConfigureDatabaseWithBodyWithResponse request with any body
	PostConfigureDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureDatabaseResponse, error)

	PostConfigureDatabaseWithResponse(ctx context.Context, body PostConfigureDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureDatabaseResponse, error)

	// PostConfigureDistinctCacheWithBodyWithResponse request with any body
	PostConfigureDistinctCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureDistinctCacheResponse, error)

	PostConfigureDistinctCacheWithResponse(ctx context.Context, body PostConfigureDistinctCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureDistinctCacheResponse, error)

	// DeleteConfigureLastCacheWithResponse request
	DeleteConfigureLastCacheWithResponse(ctx context.Context, params *DeleteConfigureLastCacheParams, reqEditors ...RequestEditorFn) (*DeleteConfigureLastCacheResponse, error)

	// PostConfigureLastCacheWithBodyWithResponse request with any body
	PostConfigureLastCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureLastCacheResponse, error)

	PostConfigureLastCacheWithResponse(ctx context.Context, body PostConfigureLastCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureLastCacheResponse, error)

	// PostInstallPluginPackagesWithBodyWithResponse request with any body
	PostInstallPluginPackagesWithBodyWithResponse(ctx context.Context, params *PostInstallPluginPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallPluginPackagesResponse, error)

	PostInstallPluginPackagesWithResponse(ctx context.Context, params *PostInstallPluginPackagesParams, body PostInstallPluginPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallPluginPackagesResponse, error)

	// PostInstallPluginRequirementsWithBodyWithResponse request with any body
	PostInstallPluginRequirementsWithBodyWithResponse(ctx context.Context, params *PostInstallPluginRequirementsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallPluginRequirementsResponse, error)

	PostInstallPluginRequirementsWithResponse(ctx context.Context, params *PostInstallPluginRequirementsParams, body PostInstallPluginRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallPluginRequirementsResponse, error)

	// DeleteConfigureProcessingEngineTriggerWithResponse request
	DeleteConfigureProcessingEngineTriggerWithResponse(ctx context.Context, params *DeleteConfigureProcessingEngineTriggerParams, reqEditors ...RequestEditorFn) (*DeleteConfigureProcessingEngineTriggerResponse, error)

	// PostConfigureProcessingEngineTriggerWithBodyWithResponse request with any body
	PostConfigureProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureProcessingEngineTriggerResponse, error)

	PostConfigureProcessingEngineTriggerWithResponse(ctx context.Context, body PostConfigureProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureProcessingEngineTriggerResponse, error)

	// PostDisableProcessingEngineTriggerWithBodyWithResponse request with any body
	PostDisableProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisableProcessingEngineTriggerResponse, error)

	PostDisableProcessingEngineTriggerWithResponse(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, body PostDisableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProcessingEngineTriggerResponse, error)

	// PostEnableProcessingEngineTriggerWithBodyWithResponse request with any body
	PostEnableProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnableProcessingEngineTriggerResponse, error)

	PostEnableProcessingEngineTriggerWithResponse(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, body PostEnableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProcessingEngineTriggerResponse, error)

	// DeleteConfigureTableWithResponse request
	DeleteConfigureTableWithResponse(ctx context.Context, params *DeleteConfigureTableParams, reqEditors ...RequestEditorFn) (*DeleteConfigureTableResponse, error)

	// PostConfigureTableWithBodyWithResponse request with any body
	PostConfigureTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureTableResponse, error)

	PostConfigureTableWithResponse(ctx context.Context, body PostConfigureTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureTableResponse, error)

	// PostCreateAdminTokenWithResponse request
	PostCreateAdminTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCreateAdminTokenResponse, error)

	// PostRegenerateAdminTokenWithResponse request
	PostRegenerateAdminTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostRegenerateAdminTokenResponse, error)

	// GetProcessingEnginePluginRequestWithResponse request
	GetProcessingEnginePluginRequestWithResponse(ctx context.Context, pluginPath string, reqEditors ...RequestEditorFn) (*GetProcessingEnginePluginRequestResponse, error)

	// PostProcessingEnginePluginRequestWithBodyWithResponse request with any body
	PostProcessingEnginePluginRequestWithBodyWithResponse(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessingEnginePluginRequestResponse, error)

	PostProcessingEnginePluginRequestWithResponse(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, body PostProcessingEnginePluginRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessingEnginePluginRequestResponse, error)

	// PostTestSchedulingPluginWithResponse request
	PostTestSchedulingPluginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTestSchedulingPluginResponse, error)

	// PostTestWALPluginWithResponse request
	PostTestWALPluginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTestWALPluginResponse, error)

	// GetExecuteInfluxQLQueryWithResponse request
	GetExecuteInfluxQLQueryWithResponse(ctx context.Context, params *GetExecuteInfluxQLQueryParams, reqEditors ...RequestEditorFn) (*GetExecuteInfluxQLQueryResponse, error)

	// PostExecuteQueryInfluxQLWithBodyWithResponse request with any body
	PostExecuteQueryInfluxQLWithBodyWithResponse(ctx context.Context, params *PostExecuteQueryInfluxQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteQueryInfluxQLResponse, error)

	PostExecuteQueryInfluxQLWithResponse(ctx context.Context, params *PostExecuteQueryInfluxQLParams, body PostExecuteQueryInfluxQLJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteQueryInfluxQLResponse, error)

	// GetExecuteQuerySQLWithResponse request
	GetExecuteQuerySQLWithResponse(ctx context.Context, params *GetExecuteQuerySQLParams, reqEditors ...RequestEditorFn) (*GetExecuteQuerySQLResponse, error)

	// PostExecuteQuerySQLWithBodyWithResponse request with any body
	PostExecuteQuerySQLWithBodyWithResponse(ctx context.Context, params *PostExecuteQuerySQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteQuerySQLResponse, error)

	PostExecuteQuerySQLWithResponse(ctx context.Context, params *PostExecuteQuerySQLParams, body PostExecuteQuerySQLJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteQuerySQLResponse, error)

	// PostWriteLPWithBodyWithResponse request with any body
	PostWriteLPWithBodyWithResponse(ctx context.Context, params *PostWriteLPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWriteLPResponse, error)

	PostWriteLPWithTextBodyWithResponse(ctx context.Context, params *PostWriteLPParams, body PostWriteLPTextRequestBody, reqEditors ...RequestEditorFn) (*PostWriteLPResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetMetricsWithResponse request
	GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// GetV1ExecuteQueryWithResponse request
	GetV1ExecuteQueryWithResponse(ctx context.Context, params *GetV1ExecuteQueryParams, reqEditors ...RequestEditorFn) (*GetV1ExecuteQueryResponse, error)

	// PostExecuteV1QueryWithBodyWithResponse request with any body
	PostExecuteV1QueryWithBodyWithResponse(ctx context.Context, params *PostExecuteV1QueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteV1QueryResponse, error)

	PostExecuteV1QueryWithResponse(ctx context.Context, params *PostExecuteV1QueryParams, body PostExecuteV1QueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteV1QueryResponse, error)

	// PostV1WriteWithBodyWithResponse request with any body
	PostV1WriteWithBodyWithResponse(ctx context.Context, params *PostV1WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WriteResponse, error)

	PostV1WriteWithTextBodyWithResponse(ctx context.Context, params *PostV1WriteParams, body PostV1WriteTextRequestBody, reqEditors ...RequestEditorFn) (*PostV1WriteResponse, error)
}

type GetHealthV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2WriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostV2WriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2WriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigureDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r DeleteConfigureDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigureDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigureDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowDatabasesResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetConfigureDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigureDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigureDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostConfigureDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigureDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigureDistinctCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigureDistinctCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigureDistinctCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigureLastCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r DeleteConfigureLastCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigureLastCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigureLastCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostConfigureLastCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigureLastCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstallPluginPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostInstallPluginPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstallPluginPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstallPluginRequirementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostInstallPluginRequirementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstallPluginRequirementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigureProcessingEngineTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r DeleteConfigureProcessingEngineTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigureProcessingEngineTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigureProcessingEngineTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostConfigureProcessingEngineTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigureProcessingEngineTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDisableProcessingEngineTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostDisableProcessingEngineTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDisableProcessingEngineTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnableProcessingEngineTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostEnableProcessingEngineTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnableProcessingEngineTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigureTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r DeleteConfigureTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigureTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigureTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostConfigureTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigureTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateAdminTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AdminTokenObject
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostCreateAdminTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateAdminTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegenerateAdminTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AdminTokenObject
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostRegenerateAdminTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegenerateAdminTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProcessingEnginePluginRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetProcessingEnginePluginRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProcessingEnginePluginRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProcessingEnginePluginRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostProcessingEnginePluginRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProcessingEnginePluginRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTestSchedulingPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostTestSchedulingPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTestSchedulingPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTestWALPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostTestWALPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTestWALPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecuteInfluxQLQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetExecuteInfluxQLQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecuteInfluxQLQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecuteQueryInfluxQLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostExecuteQueryInfluxQLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecuteQueryInfluxQLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExecuteQuerySQLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetExecuteQuerySQLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExecuteQuerySQLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecuteQuerySQLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostExecuteQuerySQLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecuteQuerySQLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWriteLPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostWriteLPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWriteLPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ExecuteQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetV1ExecuteQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ExecuteQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExecuteV1QueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryResponse
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostExecuteV1QueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExecuteV1QueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r PostV1WriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthV1WithResponse request returning *GetHealthV1Response
func (c *ClientWithResponses) GetHealthV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthV1Response, error) {
	rsp, err := c.GetHealthV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthV1Response(rsp)
}

// PostV2WriteWithBodyWithResponse request with arbitrary body returning *PostV2WriteResponse
func (c *ClientWithResponses) PostV2WriteWithBodyWithResponse(ctx context.Context, params *PostV2WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2WriteResponse, error) {
	rsp, err := c.PostV2WriteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2WriteResponse(rsp)
}

func (c *ClientWithResponses) PostV2WriteWithTextBodyWithResponse(ctx context.Context, params *PostV2WriteParams, body PostV2WriteTextRequestBody, reqEditors ...RequestEditorFn) (*PostV2WriteResponse, error) {
	rsp, err := c.PostV2WriteWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2WriteResponse(rsp)
}

// DeleteConfigureDatabaseWithResponse request returning *DeleteConfigureDatabaseResponse
func (c *ClientWithResponses) DeleteConfigureDatabaseWithResponse(ctx context.Context, params *DeleteConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*DeleteConfigureDatabaseResponse, error) {
	rsp, err := c.DeleteConfigureDatabase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigureDatabaseResponse(rsp)
}

// GetConfigureDatabaseWithResponse request returning *GetConfigureDatabaseResponse
func (c *ClientWithResponses) GetConfigureDatabaseWithResponse(ctx context.Context, params *GetConfigureDatabaseParams, reqEditors ...RequestEditorFn) (*GetConfigureDatabaseResponse, error) {
	rsp, err := c.GetConfigureDatabase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigureDatabaseResponse(rsp)
}

// PostConfigureDatabaseWithBodyWithResponse request with arbitrary body returning *PostConfigureDatabaseResponse
func (c *ClientWithResponses) PostConfigureDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureDatabaseResponse, error) {
	rsp, err := c.PostConfigureDatabaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureDatabaseResponse(rsp)
}

func (c *ClientWithResponses) PostConfigureDatabaseWithResponse(ctx context.Context, body PostConfigureDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureDatabaseResponse, error) {
	rsp, err := c.PostConfigureDatabase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureDatabaseResponse(rsp)
}

// PostConfigureDistinctCacheWithBodyWithResponse request with arbitrary body returning *PostConfigureDistinctCacheResponse
func (c *ClientWithResponses) PostConfigureDistinctCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureDistinctCacheResponse, error) {
	rsp, err := c.PostConfigureDistinctCacheWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureDistinctCacheResponse(rsp)
}

func (c *ClientWithResponses) PostConfigureDistinctCacheWithResponse(ctx context.Context, body PostConfigureDistinctCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureDistinctCacheResponse, error) {
	rsp, err := c.PostConfigureDistinctCache(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureDistinctCacheResponse(rsp)
}

// DeleteConfigureLastCacheWithResponse request returning *DeleteConfigureLastCacheResponse
func (c *ClientWithResponses) DeleteConfigureLastCacheWithResponse(ctx context.Context, params *DeleteConfigureLastCacheParams, reqEditors ...RequestEditorFn) (*DeleteConfigureLastCacheResponse, error) {
	rsp, err := c.DeleteConfigureLastCache(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigureLastCacheResponse(rsp)
}

// PostConfigureLastCacheWithBodyWithResponse request with arbitrary body returning *PostConfigureLastCacheResponse
func (c *ClientWithResponses) PostConfigureLastCacheWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureLastCacheResponse, error) {
	rsp, err := c.PostConfigureLastCacheWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureLastCacheResponse(rsp)
}

func (c *ClientWithResponses) PostConfigureLastCacheWithResponse(ctx context.Context, body PostConfigureLastCacheJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureLastCacheResponse, error) {
	rsp, err := c.PostConfigureLastCache(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureLastCacheResponse(rsp)
}

// PostInstallPluginPackagesWithBodyWithResponse request with arbitrary body returning *PostInstallPluginPackagesResponse
func (c *ClientWithResponses) PostInstallPluginPackagesWithBodyWithResponse(ctx context.Context, params *PostInstallPluginPackagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallPluginPackagesResponse, error) {
	rsp, err := c.PostInstallPluginPackagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallPluginPackagesResponse(rsp)
}

func (c *ClientWithResponses) PostInstallPluginPackagesWithResponse(ctx context.Context, params *PostInstallPluginPackagesParams, body PostInstallPluginPackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallPluginPackagesResponse, error) {
	rsp, err := c.PostInstallPluginPackages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallPluginPackagesResponse(rsp)
}

// PostInstallPluginRequirementsWithBodyWithResponse request with arbitrary body returning *PostInstallPluginRequirementsResponse
func (c *ClientWithResponses) PostInstallPluginRequirementsWithBodyWithResponse(ctx context.Context, params *PostInstallPluginRequirementsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstallPluginRequirementsResponse, error) {
	rsp, err := c.PostInstallPluginRequirementsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallPluginRequirementsResponse(rsp)
}

func (c *ClientWithResponses) PostInstallPluginRequirementsWithResponse(ctx context.Context, params *PostInstallPluginRequirementsParams, body PostInstallPluginRequirementsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstallPluginRequirementsResponse, error) {
	rsp, err := c.PostInstallPluginRequirements(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstallPluginRequirementsResponse(rsp)
}

// DeleteConfigureProcessingEngineTriggerWithResponse request returning *DeleteConfigureProcessingEngineTriggerResponse
func (c *ClientWithResponses) DeleteConfigureProcessingEngineTriggerWithResponse(ctx context.Context, params *DeleteConfigureProcessingEngineTriggerParams, reqEditors ...RequestEditorFn) (*DeleteConfigureProcessingEngineTriggerResponse, error) {
	rsp, err := c.DeleteConfigureProcessingEngineTrigger(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigureProcessingEngineTriggerResponse(rsp)
}

// PostConfigureProcessingEngineTriggerWithBodyWithResponse request with arbitrary body returning *PostConfigureProcessingEngineTriggerResponse
func (c *ClientWithResponses) PostConfigureProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostConfigureProcessingEngineTriggerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureProcessingEngineTriggerResponse(rsp)
}

func (c *ClientWithResponses) PostConfigureProcessingEngineTriggerWithResponse(ctx context.Context, body PostConfigureProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostConfigureProcessingEngineTrigger(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureProcessingEngineTriggerResponse(rsp)
}

// PostDisableProcessingEngineTriggerWithBodyWithResponse request with arbitrary body returning *PostDisableProcessingEngineTriggerResponse
func (c *ClientWithResponses) PostDisableProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisableProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostDisableProcessingEngineTriggerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisableProcessingEngineTriggerResponse(rsp)
}

func (c *ClientWithResponses) PostDisableProcessingEngineTriggerWithResponse(ctx context.Context, params *PostDisableProcessingEngineTriggerParams, body PostDisableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisableProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostDisableProcessingEngineTrigger(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisableProcessingEngineTriggerResponse(rsp)
}

// PostEnableProcessingEngineTriggerWithBodyWithResponse request with arbitrary body returning *PostEnableProcessingEngineTriggerResponse
func (c *ClientWithResponses) PostEnableProcessingEngineTriggerWithBodyWithResponse(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnableProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostEnableProcessingEngineTriggerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnableProcessingEngineTriggerResponse(rsp)
}

func (c *ClientWithResponses) PostEnableProcessingEngineTriggerWithResponse(ctx context.Context, params *PostEnableProcessingEngineTriggerParams, body PostEnableProcessingEngineTriggerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnableProcessingEngineTriggerResponse, error) {
	rsp, err := c.PostEnableProcessingEngineTrigger(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnableProcessingEngineTriggerResponse(rsp)
}

// DeleteConfigureTableWithResponse request returning *DeleteConfigureTableResponse
func (c *ClientWithResponses) DeleteConfigureTableWithResponse(ctx context.Context, params *DeleteConfigureTableParams, reqEditors ...RequestEditorFn) (*DeleteConfigureTableResponse, error) {
	rsp, err := c.DeleteConfigureTable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigureTableResponse(rsp)
}

// PostConfigureTableWithBodyWithResponse request with arbitrary body returning *PostConfigureTableResponse
func (c *ClientWithResponses) PostConfigureTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigureTableResponse, error) {
	rsp, err := c.PostConfigureTableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureTableResponse(rsp)
}

func (c *ClientWithResponses) PostConfigureTableWithResponse(ctx context.Context, body PostConfigureTableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigureTableResponse, error) {
	rsp, err := c.PostConfigureTable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigureTableResponse(rsp)
}

// PostCreateAdminTokenWithResponse request returning *PostCreateAdminTokenResponse
func (c *ClientWithResponses) PostCreateAdminTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCreateAdminTokenResponse, error) {
	rsp, err := c.PostCreateAdminToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateAdminTokenResponse(rsp)
}

// PostRegenerateAdminTokenWithResponse request returning *PostRegenerateAdminTokenResponse
func (c *ClientWithResponses) PostRegenerateAdminTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostRegenerateAdminTokenResponse, error) {
	rsp, err := c.PostRegenerateAdminToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegenerateAdminTokenResponse(rsp)
}

// GetProcessingEnginePluginRequestWithResponse request returning *GetProcessingEnginePluginRequestResponse
func (c *ClientWithResponses) GetProcessingEnginePluginRequestWithResponse(ctx context.Context, pluginPath string, reqEditors ...RequestEditorFn) (*GetProcessingEnginePluginRequestResponse, error) {
	rsp, err := c.GetProcessingEnginePluginRequest(ctx, pluginPath, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProcessingEnginePluginRequestResponse(rsp)
}

// PostProcessingEnginePluginRequestWithBodyWithResponse request with arbitrary body returning *PostProcessingEnginePluginRequestResponse
func (c *ClientWithResponses) PostProcessingEnginePluginRequestWithBodyWithResponse(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProcessingEnginePluginRequestResponse, error) {
	rsp, err := c.PostProcessingEnginePluginRequestWithBody(ctx, pluginPath, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessingEnginePluginRequestResponse(rsp)
}

func (c *ClientWithResponses) PostProcessingEnginePluginRequestWithResponse(ctx context.Context, pluginPath string, params *PostProcessingEnginePluginRequestParams, body PostProcessingEnginePluginRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProcessingEnginePluginRequestResponse, error) {
	rsp, err := c.PostProcessingEnginePluginRequest(ctx, pluginPath, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProcessingEnginePluginRequestResponse(rsp)
}

// PostTestSchedulingPluginWithResponse request returning *PostTestSchedulingPluginResponse
func (c *ClientWithResponses) PostTestSchedulingPluginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTestSchedulingPluginResponse, error) {
	rsp, err := c.PostTestSchedulingPlugin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTestSchedulingPluginResponse(rsp)
}

// PostTestWALPluginWithResponse request returning *PostTestWALPluginResponse
func (c *ClientWithResponses) PostTestWALPluginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTestWALPluginResponse, error) {
	rsp, err := c.PostTestWALPlugin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTestWALPluginResponse(rsp)
}

// GetExecuteInfluxQLQueryWithResponse request returning *GetExecuteInfluxQLQueryResponse
func (c *ClientWithResponses) GetExecuteInfluxQLQueryWithResponse(ctx context.Context, params *GetExecuteInfluxQLQueryParams, reqEditors ...RequestEditorFn) (*GetExecuteInfluxQLQueryResponse, error) {
	rsp, err := c.GetExecuteInfluxQLQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecuteInfluxQLQueryResponse(rsp)
}

// PostExecuteQueryInfluxQLWithBodyWithResponse request with arbitrary body returning *PostExecuteQueryInfluxQLResponse
func (c *ClientWithResponses) PostExecuteQueryInfluxQLWithBodyWithResponse(ctx context.Context, params *PostExecuteQueryInfluxQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteQueryInfluxQLResponse, error) {
	rsp, err := c.PostExecuteQueryInfluxQLWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteQueryInfluxQLResponse(rsp)
}

func (c *ClientWithResponses) PostExecuteQueryInfluxQLWithResponse(ctx context.Context, params *PostExecuteQueryInfluxQLParams, body PostExecuteQueryInfluxQLJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteQueryInfluxQLResponse, error) {
	rsp, err := c.PostExecuteQueryInfluxQL(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteQueryInfluxQLResponse(rsp)
}

// GetExecuteQuerySQLWithResponse request returning *GetExecuteQuerySQLResponse
func (c *ClientWithResponses) GetExecuteQuerySQLWithResponse(ctx context.Context, params *GetExecuteQuerySQLParams, reqEditors ...RequestEditorFn) (*GetExecuteQuerySQLResponse, error) {
	rsp, err := c.GetExecuteQuerySQL(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExecuteQuerySQLResponse(rsp)
}

// PostExecuteQuerySQLWithBodyWithResponse request with arbitrary body returning *PostExecuteQuerySQLResponse
func (c *ClientWithResponses) PostExecuteQuerySQLWithBodyWithResponse(ctx context.Context, params *PostExecuteQuerySQLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteQuerySQLResponse, error) {
	rsp, err := c.PostExecuteQuerySQLWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteQuerySQLResponse(rsp)
}

func (c *ClientWithResponses) PostExecuteQuerySQLWithResponse(ctx context.Context, params *PostExecuteQuerySQLParams, body PostExecuteQuerySQLJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteQuerySQLResponse, error) {
	rsp, err := c.PostExecuteQuerySQL(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteQuerySQLResponse(rsp)
}

// PostWriteLPWithBodyWithResponse request with arbitrary body returning *PostWriteLPResponse
func (c *ClientWithResponses) PostWriteLPWithBodyWithResponse(ctx context.Context, params *PostWriteLPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWriteLPResponse, error) {
	rsp, err := c.PostWriteLPWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWriteLPResponse(rsp)
}

func (c *ClientWithResponses) PostWriteLPWithTextBodyWithResponse(ctx context.Context, params *PostWriteLPParams, body PostWriteLPTextRequestBody, reqEditors ...RequestEditorFn) (*PostWriteLPResponse, error) {
	rsp, err := c.PostWriteLPWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWriteLPResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetMetricsWithResponse request returning *GetMetricsResponse
func (c *ClientWithResponses) GetMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetricsResponse, error) {
	rsp, err := c.GetMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// GetV1ExecuteQueryWithResponse request returning *GetV1ExecuteQueryResponse
func (c *ClientWithResponses) GetV1ExecuteQueryWithResponse(ctx context.Context, params *GetV1ExecuteQueryParams, reqEditors ...RequestEditorFn) (*GetV1ExecuteQueryResponse, error) {
	rsp, err := c.GetV1ExecuteQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ExecuteQueryResponse(rsp)
}

// PostExecuteV1QueryWithBodyWithResponse request with arbitrary body returning *PostExecuteV1QueryResponse
func (c *ClientWithResponses) PostExecuteV1QueryWithBodyWithResponse(ctx context.Context, params *PostExecuteV1QueryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExecuteV1QueryResponse, error) {
	rsp, err := c.PostExecuteV1QueryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteV1QueryResponse(rsp)
}

func (c *ClientWithResponses) PostExecuteV1QueryWithResponse(ctx context.Context, params *PostExecuteV1QueryParams, body PostExecuteV1QueryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExecuteV1QueryResponse, error) {
	rsp, err := c.PostExecuteV1Query(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExecuteV1QueryResponse(rsp)
}

// PostV1WriteWithBodyWithResponse request with arbitrary body returning *PostV1WriteResponse
func (c *ClientWithResponses) PostV1WriteWithBodyWithResponse(ctx context.Context, params *PostV1WriteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WriteResponse, error) {
	rsp, err := c.PostV1WriteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WriteResponse(rsp)
}

func (c *ClientWithResponses) PostV1WriteWithTextBodyWithResponse(ctx context.Context, params *PostV1WriteParams, body PostV1WriteTextRequestBody, reqEditors ...RequestEditorFn) (*PostV1WriteResponse, error) {
	rsp, err := c.PostV1WriteWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WriteResponse(rsp)
}

// ParseGetHealthV1Response parses an HTTP response from a GetHealthV1WithResponse call
func ParseGetHealthV1Response(rsp *http.Response) (*GetHealthV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV2WriteResponse parses an HTTP response from a PostV2WriteWithResponse call
func ParsePostV2WriteResponse(rsp *http.Response) (*PostV2WriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2WriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConfigureDatabaseResponse parses an HTTP response from a DeleteConfigureDatabaseWithResponse call
func ParseDeleteConfigureDatabaseResponse(rsp *http.Response) (*DeleteConfigureDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigureDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConfigureDatabaseResponse parses an HTTP response from a GetConfigureDatabaseWithResponse call
func ParseGetConfigureDatabaseResponse(rsp *http.Response) (*GetConfigureDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigureDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConfigureDatabaseResponse parses an HTTP response from a PostConfigureDatabaseWithResponse call
func ParsePostConfigureDatabaseResponse(rsp *http.Response) (*PostConfigureDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigureDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConfigureDistinctCacheResponse parses an HTTP response from a PostConfigureDistinctCacheWithResponse call
func ParsePostConfigureDistinctCacheResponse(rsp *http.Response) (*PostConfigureDistinctCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigureDistinctCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteConfigureLastCacheResponse parses an HTTP response from a DeleteConfigureLastCacheWithResponse call
func ParseDeleteConfigureLastCacheResponse(rsp *http.Response) (*DeleteConfigureLastCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigureLastCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConfigureLastCacheResponse parses an HTTP response from a PostConfigureLastCacheWithResponse call
func ParsePostConfigureLastCacheResponse(rsp *http.Response) (*PostConfigureLastCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigureLastCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostInstallPluginPackagesResponse parses an HTTP response from a PostInstallPluginPackagesWithResponse call
func ParsePostInstallPluginPackagesResponse(rsp *http.Response) (*PostInstallPluginPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstallPluginPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostInstallPluginRequirementsResponse parses an HTTP response from a PostInstallPluginRequirementsWithResponse call
func ParsePostInstallPluginRequirementsResponse(rsp *http.Response) (*PostInstallPluginRequirementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstallPluginRequirementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConfigureProcessingEngineTriggerResponse parses an HTTP response from a DeleteConfigureProcessingEngineTriggerWithResponse call
func ParseDeleteConfigureProcessingEngineTriggerResponse(rsp *http.Response) (*DeleteConfigureProcessingEngineTriggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigureProcessingEngineTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConfigureProcessingEngineTriggerResponse parses an HTTP response from a PostConfigureProcessingEngineTriggerWithResponse call
func ParsePostConfigureProcessingEngineTriggerResponse(rsp *http.Response) (*PostConfigureProcessingEngineTriggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigureProcessingEngineTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostDisableProcessingEngineTriggerResponse parses an HTTP response from a PostDisableProcessingEngineTriggerWithResponse call
func ParsePostDisableProcessingEngineTriggerResponse(rsp *http.Response) (*PostDisableProcessingEngineTriggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDisableProcessingEngineTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostEnableProcessingEngineTriggerResponse parses an HTTP response from a PostEnableProcessingEngineTriggerWithResponse call
func ParsePostEnableProcessingEngineTriggerResponse(rsp *http.Response) (*PostEnableProcessingEngineTriggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnableProcessingEngineTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConfigureTableResponse parses an HTTP response from a DeleteConfigureTableWithResponse call
func ParseDeleteConfigureTableResponse(rsp *http.Response) (*DeleteConfigureTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigureTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConfigureTableResponse parses an HTTP response from a PostConfigureTableWithResponse call
func ParsePostConfigureTableResponse(rsp *http.Response) (*PostConfigureTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigureTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostCreateAdminTokenResponse parses an HTTP response from a PostCreateAdminTokenWithResponse call
func ParsePostCreateAdminTokenResponse(rsp *http.Response) (*PostCreateAdminTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateAdminTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AdminTokenObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostRegenerateAdminTokenResponse parses an HTTP response from a PostRegenerateAdminTokenWithResponse call
func ParsePostRegenerateAdminTokenResponse(rsp *http.Response) (*PostRegenerateAdminTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegenerateAdminTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AdminTokenObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetProcessingEnginePluginRequestResponse parses an HTTP response from a GetProcessingEnginePluginRequestWithResponse call
func ParseGetProcessingEnginePluginRequestResponse(rsp *http.Response) (*GetProcessingEnginePluginRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProcessingEnginePluginRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostProcessingEnginePluginRequestResponse parses an HTTP response from a PostProcessingEnginePluginRequestWithResponse call
func ParsePostProcessingEnginePluginRequestResponse(rsp *http.Response) (*PostProcessingEnginePluginRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProcessingEnginePluginRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostTestSchedulingPluginResponse parses an HTTP response from a PostTestSchedulingPluginWithResponse call
func ParsePostTestSchedulingPluginResponse(rsp *http.Response) (*PostTestSchedulingPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTestSchedulingPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostTestWALPluginResponse parses an HTTP response from a PostTestWALPluginWithResponse call
func ParsePostTestWALPluginResponse(rsp *http.Response) (*PostTestWALPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTestWALPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetExecuteInfluxQLQueryResponse parses an HTTP response from a GetExecuteInfluxQLQueryWithResponse call
func ParseGetExecuteInfluxQLQueryResponse(rsp *http.Response) (*GetExecuteInfluxQLQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecuteInfluxQLQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePostExecuteQueryInfluxQLResponse parses an HTTP response from a PostExecuteQueryInfluxQLWithResponse call
func ParsePostExecuteQueryInfluxQLResponse(rsp *http.Response) (*PostExecuteQueryInfluxQLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecuteQueryInfluxQLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseGetExecuteQuerySQLResponse parses an HTTP response from a GetExecuteQuerySQLWithResponse call
func ParseGetExecuteQuerySQLResponse(rsp *http.Response) (*GetExecuteQuerySQLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExecuteQuerySQLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePostExecuteQuerySQLResponse parses an HTTP response from a PostExecuteQuerySQLWithResponse call
func ParsePostExecuteQuerySQLResponse(rsp *http.Response) (*PostExecuteQuerySQLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecuteQuerySQLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePostWriteLPResponse parses an HTTP response from a PostWriteLPWithResponse call
func ParsePostWriteLPResponse(rsp *http.Response) (*PostWriteLPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWriteLPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricsResponse parses an HTTP response from a GetMetricsWithResponse call
func ParseGetMetricsResponse(rsp *http.Response) (*GetMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ExecuteQueryResponse parses an HTTP response from a GetV1ExecuteQueryWithResponse call
func ParseGetV1ExecuteQueryResponse(rsp *http.Response) (*GetV1ExecuteQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ExecuteQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/csv) unsupported

	}

	return response, nil
}

// ParsePostExecuteV1QueryResponse parses an HTTP response from a PostExecuteV1QueryWithResponse call
func ParsePostExecuteV1QueryResponse(rsp *http.Response) (*PostExecuteV1QueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExecuteV1QueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/csv) unsupported

	}

	return response, nil
}

// ParsePostV1WriteResponse parses an HTTP response from a PostV1WriteWithResponse call
func ParsePostV1WriteResponse(rsp *http.Response) (*PostV1WriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
